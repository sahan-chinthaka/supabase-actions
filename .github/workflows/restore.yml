name: Database Restore

on:
  workflow_dispatch:
    inputs:
      backup_filename:
        description: "Backup filename to restore (e.g., backup_20250604_104307.dump)"
        required: true
        type: string
      confirm_restore:
        description: 'Type "CONFIRM" to proceed with restore (this will overwrite existing data)'
        required: true
        type: string

jobs:
  restore:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_restore == 'CONFIRM'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate inputs
        run: |
          if [[ ! "${{ github.event.inputs.backup_filename }}" =~ ^backup_[0-9]{8}_[0-9]{6}\.dump$ ]]; then
            echo "Error: Invalid backup filename format. Expected format: backup_YYYYMMDD_HHMMSS.dump"
            exit 1
          fi
          echo "Backup filename is valid: ${{ github.event.inputs.backup_filename }}"

      - name: Install PostgreSQL client and AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client python3-pip
          pip3 install awscli

      - name: Configure AWS CLI for R2
        run: |
          aws configure set aws_access_key_id ${{ secrets.R2_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.R2_SECRET_ACCESS_KEY }}
          aws configure set region auto

      - name: Download backup from R2
        env:
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          echo "Downloading backup: ${{ github.event.inputs.backup_filename }}"
          aws s3 cp s3://${R2_BUCKET_NAME}/backups/${{ github.event.inputs.backup_filename }} ./${{ github.event.inputs.backup_filename }} --endpoint-url $R2_ENDPOINT

          # Verify file was downloaded
          if [[ ! -f "${{ github.event.inputs.backup_filename }}" ]]; then
            echo "Error: Failed to download backup file"
            exit 1
          fi

          echo "Backup file downloaded successfully"
          ls -la ${{ github.event.inputs.backup_filename }}

      - name: Create database backup before restore
        env:
          PGPASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          PGHOST: ${{ secrets.DATABASE_HOST }}
          PGUSER: ${{ secrets.DATABASE_USER }}
          PGDATABASE: ${{ secrets.DATABASE_NAME }}
        run: |
          echo "Creating safety backup before restore..."
          SAFETY_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          pg_dump -Fc > "safety_backup_${SAFETY_TIMESTAMP}.dump"
          echo "SAFETY_BACKUP=safety_backup_${SAFETY_TIMESTAMP}.dump" >> $GITHUB_ENV

      - name: Upload safety backup to R2
        env:
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          echo "Uploading safety backup to R2..."
          aws s3 cp ${SAFETY_BACKUP} s3://${R2_BUCKET_NAME}/safety-backups/${SAFETY_BACKUP} --endpoint-url $R2_ENDPOINT
          echo "Safety backup uploaded: ${SAFETY_BACKUP}"

      - name: Reset database schema
        env:
          PGPASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          PGHOST: ${{ secrets.DATABASE_HOST }}
          PGUSER: ${{ secrets.DATABASE_USER }}
          PGDATABASE: ${{ secrets.DATABASE_NAME }}
        run: |
          echo "Resetting database schema before restore..."
          echo "WARNING: This will drop all existing tables and data!"

          # Drop all tables in public schema
          psql -c "
            DO \$\$ 
            DECLARE 
                r RECORD;
            BEGIN
                -- Drop all tables
                FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') 
                LOOP
                    EXECUTE 'DROP TABLE IF EXISTS public.' || quote_ident(r.tablename) || ' CASCADE';
                END LOOP;
                
                -- Drop all sequences
                FOR r IN (SELECT sequence_name FROM information_schema.sequences WHERE sequence_schema = 'public')
                LOOP
                    EXECUTE 'DROP SEQUENCE IF EXISTS public.' || quote_ident(r.sequence_name) || ' CASCADE';
                END LOOP;
                
                -- Drop all functions
                FOR r IN (SELECT proname, pg_get_function_identity_arguments(oid) as args 
                         FROM pg_proc 
                         WHERE pronamespace = 'public'::regnamespace)
                LOOP
                    EXECUTE 'DROP FUNCTION IF EXISTS public.' || quote_ident(r.proname) || '(' || r.args || ') CASCADE';
                END LOOP;
                
                -- Drop all types
                FOR r IN (SELECT typname FROM pg_type WHERE typnamespace = 'public'::regnamespace AND typtype = 'c')
                LOOP
                    EXECUTE 'DROP TYPE IF EXISTS public.' || quote_ident(r.typname) || ' CASCADE';
                END LOOP;
            END \$\$;"

          echo "Database schema reset completed."

      - name: Restore database
        env:
          PGPASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          PGHOST: ${{ secrets.DATABASE_HOST }}
          PGUSER: ${{ secrets.DATABASE_USER }}
          PGDATABASE: ${{ secrets.DATABASE_NAME }}
        run: |
          echo "Starting database restore..."
          echo "Restoring from backup: ${{ github.event.inputs.backup_filename }}"

          # Restore without --clean since we already reset the schema
          # Use --exit-on-error=false to continue despite errors (common in managed databases)
          set +e  # Disable exit on error temporarily
          pg_restore --no-owner --no-privileges --verbose \
            --single-transaction --exit-on-error=false \
            -d $PGDATABASE ${{ github.event.inputs.backup_filename }}

          RESTORE_EXIT_CODE=$?
          set -e  # Re-enable exit on error

          if [ $RESTORE_EXIT_CODE -eq 0 ]; then
            echo "Database restore completed successfully!"
          else
            echo "Database restore completed with warnings (exit code: $RESTORE_EXIT_CODE)"
            echo "This is common with managed databases like Supabase and usually indicates non-critical permission issues."
            echo "The restore likely succeeded despite the warnings."
          fi

      - name: Verify restore
        env:
          PGPASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          PGHOST: ${{ secrets.DATABASE_HOST }}
          PGUSER: ${{ secrets.DATABASE_USER }}
          PGDATABASE: ${{ secrets.DATABASE_NAME }}
        run: |
          echo "Verifying database restore..."

          # Get table count
          TABLE_COUNT=$(psql -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';")
          echo "Number of tables in restored database: $TABLE_COUNT"

          # List all tables
          echo "Tables in restored database:"
          psql -c "\dt"

          echo "Database restore verification completed!"

      - name: Cleanup local files
        run: |
          rm -f ${{ github.event.inputs.backup_filename }}
          rm -f ${SAFETY_BACKUP}
          echo "Local backup files cleaned up"

      - name: Restore Summary
        run: |
          echo "=== RESTORE SUMMARY ==="
          echo "✅ Backup file: ${{ github.event.inputs.backup_filename }}"
          echo "✅ Safety backup created: ${SAFETY_BACKUP}"
          echo "✅ Database restored successfully"
          echo "✅ Restore verification completed"
          echo "========================"
